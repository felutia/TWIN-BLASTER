
/*!
 *  @file       diffuse.vcg
 *  @brief      ディフューズバーテックスシェーダ
 *  @author     Kazuya Maruyama
 *  @date       2014/01/13
 *  @since      0.2.1
 *
 *  Copyright (c) 2013, Kazuya Maruyama. All rights reserved.
 */

uniform float4x4    ViewProjection;
uniform float3      EyePosition;
uniform float4x4    WorldMatrix[16];
uniform float4      VertexOffsets[2];
uniform int         VertexWeightCount;
/*
 *  頂点変換
 */
void
ComputeVertex(  in  float4 a_Position,
                in  float3 a_Normal,
                in  float4 a_Weight,
                in  float4 a_Indices,
                out float4 v_Position,
                out float3 v_Normal
                )
{
    float4 position;
    
    position.xyz = a_Position.xyz * VertexOffsets[0].w + VertexOffsets[0].xyz;
    
    position.w = 1.0 ;

    float4x4 M = WorldMatrix[(int)a_Indices.x];
    float4 P = mul( position, M ) * a_Weight.x;
    float3 N = ( mul( float4( a_Normal, 0.0 ), M ) ).xyz * a_Weight.x;
    
    if( VertexWeightCount > 1 )
    {
        M = WorldMatrix[(int)a_Indices[1]];
        P += mul( position, M ) * a_Weight.y;
        N += ( mul( float4( a_Normal, 0.0 ), M ) ).xyz * a_Weight.y;
         
        if ( VertexWeightCount > 2 )
        {
            M = WorldMatrix[(int)a_Indices[2]];
            P += mul( position, M ) * a_Weight.z;
            N += ( mul( float4( a_Normal, 0.0 ), M ) ).xyz * a_Weight.z;
            
            if ( VertexWeightCount > 3 )
            {
                M = WorldMatrix[(int)a_Indices[3]];
                P += mul( position, M ) * a_Weight.w;
                N += ( mul( float4( a_Normal, 0.0 ), M ) ).xyz * a_Weight.w;
            }
        }
    }
    
    N = normalize( N );
    
    v_Position = P;
    
    v_Normal   = N;
}

/*
 *  バーテックスシェーダ
 */
void
main(   in  float4  a_Position   : POSITION,
        in  float3  a_Normal     : NORMAL,
        in  float4  a_Color      : COLOR,
        in  float2  a_TexCoord   : TEXCOORD0,
        in  float4  a_Weight     : BLENDWEIGHT,
        in  float4  a_Indices    : BLENDINDICES,
        out float4  v_Position   : POSITION,
        out float2  v_TexCoord   : TEXCOORD0
        )
{
    float4 P;
    float3 N;
    
    ComputeVertex( a_Position, a_Normal, a_Weight, a_Indices, P, N );

    v_Position = mul( P, ViewProjection );
    v_TexCoord = a_TexCoord * VertexOffsets[1].zw + VertexOffsets[1].xy;
}
